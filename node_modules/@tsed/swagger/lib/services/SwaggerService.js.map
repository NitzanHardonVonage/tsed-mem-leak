{"version":3,"file":"SwaggerService.js","sourceRoot":"","sources":["../../src/services/SwaggerService.ts"],"names":[],"mappings":"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","sourcesContent":["import {Configuration, ControllerProvider, EndpointMetadata, InjectorService, RouteService, Service} from \"@tsed/common\";\nimport {deepExtends, nameOf, Store} from \"@tsed/core\";\nimport * as Fs from \"fs\";\nimport {Schema, Spec, Tag} from \"swagger-schema-official\";\nimport {OpenApiEndpointBuilder} from \"../class/OpenApiEndpointBuilder\";\nimport {ISwaggerPaths, ISwaggerSettings, ISwaggerSpec} from \"../interfaces\";\nimport {getReducers} from \"../utils\";\n\n@Service()\nexport class SwaggerService {\n  constructor(\n    private injectorService: InjectorService,\n    private routeService: RouteService,\n    @Configuration() private configuration: Configuration\n  ) {}\n\n  /**\n   *\n   * @returns {Spec}\n   */\n  public getOpenAPISpec(conf: ISwaggerSettings): Spec {\n    const defaultSpec = this.getDefaultSpec(conf);\n    const paths: ISwaggerPaths = {};\n    const definitions = {};\n    const doc = conf.doc;\n    let tags: Tag[] = [];\n\n    const getOperationId = this.createOperationIdFormatter(conf);\n\n    this.routeService.routes.forEach(({provider, route}) => {\n      const hidden = provider.store.get(\"hidden\");\n      const docs = provider.store.get(\"docs\") || [];\n\n      if ((!doc && !hidden) || (doc && docs.indexOf(doc) > -1)) {\n        tags = tags.concat(this.buildRoutes(paths, definitions, provider, route, getOperationId));\n      }\n    });\n\n    tags = tags.sort((a: Tag, b: Tag) => (a.name < b.name ? -1 : 1));\n\n    return deepExtends(\n      defaultSpec,\n      {\n        tags,\n        paths,\n        definitions\n      },\n      getReducers()\n    );\n  }\n\n  /**\n   * Return the global api information.\n   * @returns {Info}\n   */\n  public getDefaultSpec(conf: Partial<ISwaggerSettings>): Spec {\n    const {version} = this.configuration;\n    const spec: ISwaggerSpec =\n      conf.spec ||\n      ({\n        info: {},\n        securityDefinitions: {}\n      } as any);\n\n    const specPath = conf.specPath;\n\n    let specPathContent = {};\n\n    if (specPath) {\n      specPathContent = this.readSpecPath(specPath);\n    }\n\n    /* istanbul ignore next */\n    const {title = \"Api documentation\", description = \"\", version: versionInfo, termsOfService = \"\", contact, license} =\n      spec.info || ({} as any);\n\n    return deepExtends(\n      {\n        swagger: \"2.0\",\n        ...spec,\n        info: {\n          version: versionInfo || version,\n          title,\n          description,\n          termsOfService,\n          contact,\n          license\n        },\n        consumes: this.configuration.acceptMimes.concat(spec.consumes || []),\n        produces: spec.produces || [\"application/json\"],\n        securityDefinitions: spec.securityDefinitions || {}\n      },\n      specPathContent,\n      getReducers()\n    );\n  }\n\n  private readSpecPath(path: string) {\n    path = this.configuration.resolve(path);\n    if (Fs.existsSync(path)) {\n      const json = Fs.readFileSync(path, {encoding: \"utf8\"});\n      /* istanbul ignore else */\n      if (json !== \"\") {\n        return JSON.parse(json);\n      }\n    }\n\n    return {};\n  }\n\n  /**\n   *\n   * @param paths\n   * @param definitions\n   * @param ctrl\n   * @param endpointUrl\n   * @param getOperationId\n   */\n  private buildRoutes(\n    paths: ISwaggerPaths,\n    definitions: {[key: string]: Schema},\n    ctrl: ControllerProvider,\n    endpointUrl: string,\n    getOperationId: (targetName: string, methodName: string) => string\n  ): Tag[] {\n    let tags: Tag[] = [];\n\n    ctrl.children\n      .map(ctrl => this.injectorService.getProvider(ctrl))\n      .forEach((provider: ControllerProvider) => {\n        if (!provider.store.get(\"hidden\")) {\n          tags = tags.concat(this.buildRoutes(paths, definitions, provider, `${endpointUrl}${provider.path}`, getOperationId));\n        }\n      });\n\n    ctrl.endpoints.forEach((endpoint: EndpointMetadata) => {\n      if (endpoint.store.get(\"hidden\")) {\n        return;\n      }\n\n      endpoint.pathsMethods.forEach(pathMethod => {\n        /* istanbul ignore else */\n        if (!!pathMethod.method) {\n          const builder = new OpenApiEndpointBuilder(endpoint, endpointUrl, pathMethod, getOperationId).build();\n\n          deepExtends(paths, builder.paths);\n          deepExtends(definitions, builder.definitions);\n        }\n      });\n    });\n\n    return ctrl.endpoints.length ? tags.concat(this.buildTags(ctrl)) : tags;\n  }\n\n  /**\n   *\n   * @param ctrl\n   */\n  private buildTags(ctrl: ControllerProvider): Tag {\n    const clazz = ctrl.useClass;\n    const ctrlStore = Store.from(clazz);\n\n    return Object.assign(\n      {\n        name: ctrlStore.get(\"name\") || nameOf(clazz),\n        description: ctrlStore.get(\"description\")\n      },\n      ctrlStore.get(\"tag\") || {}\n    );\n  }\n\n  /**\n   *\n   * @param {ISwaggerSettings} conf\n   * @returns {(targetName: string, methodName: string) => (any | string)}\n   */\n  private createOperationIdFormatter = (conf: ISwaggerSettings) => {\n    const OPERATION_IDS: any = {};\n\n    return (targetName: string, methodName: string) => {\n      const {operationIdFormat = \"%c.%m\"} = conf || {};\n\n      const operationId = operationIdFormat.replace(/%c/, targetName).replace(/%m/, methodName);\n      const operationKey = targetName + methodName;\n\n      if (OPERATION_IDS[operationKey] === undefined) {\n        OPERATION_IDS[operationKey] = 0;\n\n        return operationId;\n      }\n\n      const id = OPERATION_IDS[operationKey] + 1;\n\n      OPERATION_IDS[operationKey] = id;\n\n      return operationId + \"_\" + id;\n    };\n  };\n}\n"]}