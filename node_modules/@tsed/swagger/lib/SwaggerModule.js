"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const common_1 = require("@tsed/common");
const Express = require("express");
const Fs = require("fs");
const PathUtils = require("path");
const ts_log_debug_1 = require("ts-log-debug");
const SwaggerService_1 = require("./services/SwaggerService");
const swaggerUiPath = require("swagger-ui-dist").absolutePath();
const ejs = require("ejs");
let SwaggerModule = class SwaggerModule {
    constructor(swaggerService, configuration, expressApplication) {
        this.swaggerService = swaggerService;
        this.configuration = configuration;
        this.expressApplication = expressApplication;
        this.loaded = false;
    }
    /**
     *
     */
    $beforeRoutesInit() {
        if (this.loaded) {
            return;
        }
        const swagger = [].concat(this.configuration.get("swagger")).filter(o => !!o);
        const urls = swagger.reduce((acc, conf) => {
            const { path = "/", doc, hidden } = conf;
            if (!hidden) {
                acc.push({ url: `${path}/swagger.json`, name: doc || path });
            }
            return acc;
        }, []);
        swagger.forEach((conf) => {
            const { path = "/" } = conf;
            this.expressApplication.get(path, this.middlewareRedirect(path));
            this.expressApplication.use(path, this.createRouter(conf, urls));
        });
        this.loaded = true;
    }
    $onRoutesInit() {
        const swagger = [].concat(this.configuration.get("swagger")).filter(o => !!o);
        swagger.forEach((conf) => {
            const { outFile } = conf;
            const spec = this.swaggerService.getOpenAPISpec(conf);
            if (outFile) {
                Fs.writeFileSync(outFile, JSON.stringify(spec, null, 2));
            }
        });
    }
    $onReady() {
        const displayLog = (host) => {
            const swagger = [].concat(this.configuration.get("swagger")).filter(o => !!o);
            swagger.forEach((conf) => {
                const { path = "/", doc } = conf;
                const url = typeof host.port === "number" ? `${host.protocol}://${host.address}:${host.port}` : "";
                ts_log_debug_1.$log.info(`[${doc || "default"}] Swagger JSON is available on ${url}${path}/swagger.json`);
                ts_log_debug_1.$log.info(`[${doc || "default"}] Swagger UI is available on ${url}${path}/`);
            });
        };
        if (this.configuration.httpsPort) {
            const host = this.configuration.getHttpsPort();
            displayLog(Object.assign({ protocol: "https" }, host));
        }
        else if (this.configuration.httpPort) {
            const host = this.configuration.getHttpPort();
            displayLog(Object.assign({ protocol: "http" }, host));
        }
    }
    /**
     *
     * @param {ISwaggerSettings} conf
     * @param urls
     */
    createRouter(conf, urls) {
        const { cssPath, jsPath } = conf;
        const router = Express.Router();
        router.get("/", this.middlewareIndex(conf, urls));
        router.get("/swagger.json", this.middlewareSwaggerJson(conf));
        router.use(Express.static(swaggerUiPath));
        if (cssPath) {
            router.get("/main.css", this.middlewareCss(cssPath));
        }
        if (jsPath) {
            router.get("/main.js", this.middlewareJs(jsPath));
        }
        return router;
    }
    middlewareSwaggerJson(conf) {
        return (req, res) => {
            res.status(200).json(this.swaggerService.getOpenAPISpec(conf));
        };
    }
    mapSwaggerUIConfig(conf, urls) {
        const { path = "/", options = {}, showExplorer, cssPath, jsPath } = conf;
        const spec = this.swaggerService.getOpenAPISpec(conf);
        return {
            spec,
            url: `${path}/swagger.json`,
            urls,
            showExplorer,
            cssPath,
            jsPath,
            swaggerOptions: options
        };
    }
    middlewareRedirect(path) {
        /* istanbul ignore next */
        return (req, res, next) => {
            if (req.url === path && !req.url.match(/\/$/)) {
                res.redirect(`${path}/`);
            }
            else {
                next();
            }
        };
    }
    /**
     *
     * @returns {(req: any, res: any) => any}
     * @param conf
     * @param urls
     */
    middlewareIndex(conf, urls) {
        /* istanbul ignore next */
        return (req, res) => ejs.renderFile(__dirname + "/../views/index.ejs", this.mapSwaggerUIConfig(conf, urls), {}, (err, str) => {
            if (err) {
                ts_log_debug_1.$log.error(err);
                res.status(500).send(err.message);
            }
            else {
                res.send(str);
            }
        });
    }
    /**
     *
     * @param {e.Router} router
     * @param {string} path
     */
    middlewareCss(path) {
        /* istanbul ignore next */
        return (req, res) => {
            const content = Fs.readFileSync(PathUtils.resolve(this.configuration.resolve(path)), { encoding: "utf8" });
            res.set("Content-Type", "text/css");
            res.status(200).send(content);
        };
    }
    /**
     *
     * @param {string} path
     */
    middlewareJs(path) {
        /* istanbul ignore next */
        return (req, res) => {
            const content = Fs.readFileSync(PathUtils.resolve(this.configuration.resolve(path)), { encoding: "utf8" });
            res.set("Content-Type", "application/javascript");
            res.status(200).send(content);
        };
    }
};
SwaggerModule = tslib_1.__decorate([
    common_1.Module(),
    tslib_1.__param(1, common_1.Configuration()),
    tslib_1.__param(2, common_1.ExpressApplication),
    tslib_1.__metadata("design:paramtypes", [SwaggerService_1.SwaggerService, Object, Function])
], SwaggerModule);
exports.SwaggerModule = SwaggerModule;
//# sourceMappingURL=SwaggerModule.js.map