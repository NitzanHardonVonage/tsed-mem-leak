{"version":3,"file":"SwaggerModule.js","sourceRoot":"","sources":["../src/SwaggerModule.ts"],"names":[],"mappings":"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","sourcesContent":["import {BeforeRoutesInit, Configuration, ExpressApplication, Module, OnReady} from \"@tsed/common\";\nimport * as Express from \"express\";\nimport * as Fs from \"fs\";\nimport * as PathUtils from \"path\";\nimport {$log} from \"ts-log-debug\";\nimport {ISwaggerSettings} from \"./interfaces\";\nimport {SwaggerService} from \"./services/SwaggerService\";\n\nconst swaggerUiPath = require(\"swagger-ui-dist\").absolutePath();\nconst ejs = require(\"ejs\");\n\n@Module()\nexport class SwaggerModule implements BeforeRoutesInit, OnReady {\n  private loaded = false;\n\n  constructor(\n    private swaggerService: SwaggerService,\n    @Configuration() private configuration: Configuration,\n    @ExpressApplication private expressApplication: Express.Application\n  ) {}\n\n  /**\n   *\n   */\n  $beforeRoutesInit() {\n    if (this.loaded) {\n      return;\n    }\n\n    const swagger: ISwaggerSettings[] = [].concat(this.configuration.get(\"swagger\")).filter(o => !!o);\n\n    const urls: any[] = swagger.reduce((acc: any[], conf) => {\n      const {path = \"/\", doc, hidden} = conf;\n      if (!hidden) {\n        acc.push({url: `${path}/swagger.json`, name: doc || path});\n      }\n\n      return acc;\n    }, []);\n\n    swagger.forEach((conf: ISwaggerSettings) => {\n      const {path = \"/\"} = conf;\n\n      this.expressApplication.get(path, this.middlewareRedirect(path));\n      this.expressApplication.use(path, this.createRouter(conf, urls));\n    });\n    this.loaded = true;\n  }\n\n  $onRoutesInit() {\n    const swagger: ISwaggerSettings[] = [].concat(this.configuration.get(\"swagger\")).filter(o => !!o);\n\n    swagger.forEach((conf: ISwaggerSettings) => {\n      const {outFile} = conf;\n      const spec = this.swaggerService.getOpenAPISpec(conf);\n\n      if (outFile) {\n        Fs.writeFileSync(outFile, JSON.stringify(spec, null, 2));\n      }\n    });\n  }\n\n  $onReady() {\n    const displayLog = (host: any) => {\n      const swagger: ISwaggerSettings[] = [].concat(this.configuration.get(\"swagger\")).filter(o => !!o);\n      swagger.forEach((conf: ISwaggerSettings) => {\n        const {path = \"/\", doc} = conf;\n        const url = typeof host.port === \"number\" ? `${host.protocol}://${host.address}:${host.port}` : \"\";\n\n        $log.info(`[${doc || \"default\"}] Swagger JSON is available on ${url}${path}/swagger.json`);\n        $log.info(`[${doc || \"default\"}] Swagger UI is available on ${url}${path}/`);\n      });\n    };\n\n    if (this.configuration.httpsPort) {\n      const host = this.configuration.getHttpsPort();\n      displayLog({protocol: \"https\", ...host});\n    } else if (this.configuration.httpPort) {\n      const host = this.configuration.getHttpPort();\n      displayLog({protocol: \"http\", ...host});\n    }\n  }\n\n  /**\n   *\n   * @param {ISwaggerSettings} conf\n   * @param urls\n   */\n  private createRouter(conf: ISwaggerSettings, urls: string[]) {\n    const {cssPath, jsPath} = conf;\n    const router = Express.Router();\n\n    router.get(\"/\", this.middlewareIndex(conf, urls));\n    router.get(\"/swagger.json\", this.middlewareSwaggerJson(conf));\n    router.use(Express.static(swaggerUiPath));\n\n    if (cssPath) {\n      router.get(\"/main.css\", this.middlewareCss(cssPath));\n    }\n\n    if (jsPath) {\n      router.get(\"/main.js\", this.middlewareJs(jsPath));\n    }\n\n    return router;\n  }\n\n  private middlewareSwaggerJson(conf: ISwaggerSettings) {\n    return (req: any, res: any) => {\n      res.status(200).json(this.swaggerService.getOpenAPISpec(conf));\n    };\n  }\n\n  private mapSwaggerUIConfig(conf: ISwaggerSettings, urls: string[]) {\n    const {path = \"/\", options = {}, showExplorer, cssPath, jsPath} = conf;\n    const spec = this.swaggerService.getOpenAPISpec(conf);\n\n    return {\n      spec,\n      url: `${path}/swagger.json`,\n      urls,\n      showExplorer,\n      cssPath,\n      jsPath,\n      swaggerOptions: options\n    };\n  }\n\n  private middlewareRedirect(path: string) {\n    /* istanbul ignore next */\n    return (req: any, res: any, next: any) => {\n      if (req.url === path && !req.url.match(/\\/$/)) {\n        res.redirect(`${path}/`);\n      } else {\n        next();\n      }\n    };\n  }\n\n  /**\n   *\n   * @returns {(req: any, res: any) => any}\n   * @param conf\n   * @param urls\n   */\n  private middlewareIndex(conf: ISwaggerSettings, urls: string[]) {\n    /* istanbul ignore next */\n    return (req: any, res: any) =>\n      ejs.renderFile(__dirname + \"/../views/index.ejs\", this.mapSwaggerUIConfig(conf, urls), {}, (err: any, str: string) => {\n        if (err) {\n          $log.error(err);\n          res.status(500).send(err.message);\n        } else {\n          res.send(str);\n        }\n      });\n  }\n\n  /**\n   *\n   * @param {e.Router} router\n   * @param {string} path\n   */\n  private middlewareCss(path: string) {\n    /* istanbul ignore next */\n    return (req: any, res: any) => {\n      const content = Fs.readFileSync(PathUtils.resolve(this.configuration.resolve(path)), {encoding: \"utf8\"});\n      res.set(\"Content-Type\", \"text/css\");\n      res.status(200).send(content);\n    };\n  }\n\n  /**\n   *\n   * @param {string} path\n   */\n  private middlewareJs(path: string) {\n    /* istanbul ignore next */\n    return (req: any, res: any) => {\n      const content = Fs.readFileSync(PathUtils.resolve(this.configuration.resolve(path)), {encoding: \"utf8\"});\n      res.set(\"Content-Type\", \"application/javascript\");\n      res.status(200).send(content);\n    };\n  }\n}\n"]}