{"version":3,"file":"OpenApiParamsBuilder.js","sourceRoot":"","sources":["../../src/class/OpenApiParamsBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import {ParamMetadata, ParamRegistry, ParamTypes} from \"@tsed/common\";\nimport {deepExtends, nameOf, Store, Type} from \"@tsed/core\";\nimport {BodyParameter, FormDataParameter, HeaderParameter, Parameter, PathParameter, QueryParameter, Schema} from \"swagger-schema-official\";\nimport {swaggerType} from \"../utils\";\nimport {OpenApiModelSchemaBuilder} from \"./OpenApiModelSchemaBuilder\";\n\nexport class OpenApiParamsBuilder extends OpenApiModelSchemaBuilder {\n  private _parameters: Parameter[] = [];\n  private injectedParams: ParamMetadata[];\n  private hasBody: boolean = false;\n  private hasFormData: boolean = false;\n  private name: string = \"\";\n\n  constructor(target: Type<any>, methodClassName: string, private pathParameters: PathParameter[] = []) {\n    super(target);\n    this.name = `${nameOf(target)}${methodClassName.charAt(0).toUpperCase() + methodClassName.slice(1)}`;\n\n    this.injectedParams = ParamRegistry.getParams(target, methodClassName).filter(param => {\n      if (param.paramType === ParamTypes.BODY) {\n        this.hasBody = true;\n      }\n\n      if (param.paramType === ParamTypes.FORM_DATA) {\n        this.hasFormData = true;\n      }\n\n      return !param.store.get(\"hidden\");\n    });\n\n    const fromMethod = Store.fromMethod(target, methodClassName);\n    const operation = fromMethod.get(\"operation\");\n    if (operation && operation.consumes && operation.consumes.indexOf(\"application/x-www-form-urlencoded\") > -1) {\n      this.hasFormData = true;\n    }\n  }\n\n  public get parameters(): Parameter[] {\n    return this._parameters;\n  }\n\n  /**\n   *\n   * @returns {this}\n   */\n  build(): this {\n    this._parameters = [];\n\n    this._parameters = this._parameters.concat(this.getInHeaders(), this.getInPathParams(), this.getInQueryParams());\n\n    if (this.hasFormData) {\n      this._parameters = this._parameters.concat(this.getInFormData());\n    } else if (this.hasBody) {\n      this._parameters = this._parameters.concat(this.getInBodyParam());\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * @param param\n   * @returns {Schema}\n   */\n  protected createSchemaFromBodyParam(param: ParamMetadata): Schema {\n    let builder;\n\n    const {currentProperty, schema} = this.createSchemaFromExpression(param);\n\n    if (param.isClass) {\n      builder = new OpenApiModelSchemaBuilder(param.type);\n      builder.build();\n\n      deepExtends(this._definitions, builder.definitions);\n      deepExtends(this._responses, builder.responses);\n    }\n\n    Object.assign(\n      currentProperty,\n      super.createSchema({\n        schema: param.store.get(\"schema\"),\n        type: param.type,\n        collectionType: param.collectionType\n      })\n    );\n\n    return schema;\n  }\n\n  /**\n   *\n   * @param {ParamMetadata} model\n   * @returns {Schema}\n   */\n  protected createSchemaFromQueryParam(model: ParamMetadata): Schema {\n    const type: any = swaggerType(model.type);\n    if (model.isCollection) {\n      if (model.isArray) {\n        return {\n          type: \"array\",\n          collectionFormat: \"multi\",\n          items: {\n            type\n          }\n        } as any;\n      }\n\n      return {\n        type: \"object\",\n        additionalProperties: {\n          type\n        }\n      };\n    }\n\n    return {\n      type\n    };\n  }\n\n  /**\n   *\n   * @returns {HeaderParameter[]}\n   */\n  private getInHeaders(): HeaderParameter[] {\n    return this.injectedParams\n      .filter((param: ParamMetadata) => param.paramType === ParamTypes.HEADER)\n      .map(param => {\n        return Object.assign({}, param.store.get(\"baseParameter\"), {\n          in: \"header\",\n          name: param.expression,\n          type: swaggerType(param.type),\n          required: param.required\n        });\n      });\n  }\n\n  /**\n   *\n   * @returns {any[]}\n   */\n  private getInFormData(): FormDataParameter[] {\n    return this.injectedParams\n      .filter((param: ParamMetadata) => param.paramType === ParamTypes.BODY || param.paramType === ParamTypes.FORM_DATA)\n      .map(param => {\n        const name = ((param.expression as string) || \"\").replace(\".0\", \"\");\n        const type = param.paramType === ParamTypes.FORM_DATA ? \"file\" : swaggerType(param.paramType);\n\n        return Object.assign({}, param.store.get(\"baseParameter\"), {\n          in: \"formData\",\n          name,\n          required: param.required,\n          type\n        });\n      });\n  }\n\n  /**\n   *\n   * @returns {ParamMetadata | undefined}\n   */\n  private getInBodyParam(): BodyParameter {\n    const params = this.injectedParams.filter((param: ParamMetadata) => param.paramType === ParamTypes.BODY);\n\n    const param = params.find((param: ParamMetadata) => !param.expression);\n\n    if (param) {\n      const builder = new OpenApiModelSchemaBuilder(param.type);\n      builder.build();\n\n      deepExtends(this._responses, builder.responses);\n\n      this._definitions = {\n        ...this._definitions,\n        ...builder.definitions\n      };\n\n      if (param.required) {\n        this.addResponse400();\n      }\n\n      return Object.assign({description: \"\"}, param.store.get(\"baseParameter\"), {\n        in: \"body\",\n        name: \"body\",\n        required: !!param.required,\n        schema: this.createSchema({\n          schema: param.store.get(\"schema\"),\n          type: param.type,\n          collectionType: param.collectionType\n        })\n      });\n    }\n\n    let required = false;\n    const model = `${this.name}Payload`;\n    const schema = params.reduce((acc: any, param) => {\n      deepExtends(acc, this.createSchemaFromBodyParam(param));\n\n      if (param.required) {\n        this.addResponse400();\n        required = true;\n      }\n\n      return acc;\n    }, {});\n\n    this._definitions[model] = schema;\n\n    return {\n      in: \"body\",\n      name: \"body\",\n      required,\n      description: \"\",\n      schema: {\n        $ref: `#/definitions/${model}`\n      }\n    };\n  }\n\n  /**\n   *\n   * @returns {PathParameter[]}\n   */\n  private getInPathParams(): PathParameter[] {\n    const inPathParams: PathParameter[] = [];\n    const pathParams: Map<string, any> = new Map();\n\n    this.injectedParams.forEach((param: ParamMetadata) => {\n      if (param.paramType === ParamTypes.PATH) {\n        pathParams.set(param.expression as any, param);\n      }\n    });\n\n    this.pathParameters.forEach(pathParam => {\n      if (pathParams.has(pathParam.name)) {\n        const param = pathParams.get(pathParam.name);\n\n        pathParam = Object.assign({}, pathParam, param.store.get(\"baseParameter\") || {}, {\n          type: swaggerType(param.type)\n        });\n      }\n\n      inPathParams.push(Object.assign(pathParam, {required: true}));\n    });\n\n    return inPathParams;\n  }\n\n  /**\n   *\n   * @returns {HeaderParameter[]}\n   */\n  private getInQueryParams(): QueryParameter[] {\n    return this.injectedParams\n      .filter((param: ParamMetadata) => param.paramType === ParamTypes.QUERY)\n      .map(param => {\n        if (param.required) {\n          this.addResponse400();\n        }\n\n        return Object.assign(\n          {},\n          param.store.get(\"baseParameter\"),\n          {\n            in: \"query\",\n            name: param.expression,\n            required: !!param.required\n          },\n          this.createSchemaFromQueryParam(param)\n        );\n      });\n  }\n\n  /**\n   * Create Properties schema from an expression.\n   * @param param\n   */\n  private createSchemaFromExpression(param: ParamMetadata) {\n    const schema: Schema = {};\n    let current = schema;\n    const expression: string = (param.expression as any) || \"\";\n\n    if (!!expression) {\n      const keys = expression.split(\".\");\n      keys.forEach(key => {\n        current.type = \"object\";\n        current.properties = current.properties || {};\n        current.properties![key] = {} as Schema;\n\n        if (param.required) {\n          current.required = [key];\n        }\n\n        current = current.properties![key];\n      });\n    }\n\n    return {currentProperty: current, schema};\n  }\n\n  private addResponse400() {\n    this._responses[400] = {description: \"Missing required parameter\"};\n  }\n}\n"]}