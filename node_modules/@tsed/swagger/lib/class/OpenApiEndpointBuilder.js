"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const utils_1 = require("../utils");
const OpenApiModelSchemaBuilder_1 = require("./OpenApiModelSchemaBuilder");
const OpenApiParamsBuilder_1 = require("./OpenApiParamsBuilder");
/** */
class OpenApiEndpointBuilder extends OpenApiModelSchemaBuilder_1.OpenApiModelSchemaBuilder {
    constructor(endpoint, endpointUrl, pathMethod, getOperationId) {
        super(endpoint.target);
        this.endpoint = endpoint;
        this.endpointUrl = endpointUrl;
        this.pathMethod = pathMethod;
        this.getOperationId = getOperationId;
        this._paths = {};
    }
    /**
     *
     * @returns {}
     */
    get paths() {
        return this._paths;
    }
    /**
     *
     * @returns {this}
     */
    build() {
        utils_1.parseSwaggerPath(this.endpointUrl, this.pathMethod.path).forEach(({ path: endpointPath, pathParams }) => {
            const builder = new OpenApiParamsBuilder_1.OpenApiParamsBuilder(this.endpoint.target, String(this.endpoint.propertyKey), pathParams).build();
            const path = this._paths[endpointPath] || {};
            path[this.pathMethod.method] = this.createOperation(builder);
            Object.assign(this._definitions, builder.definitions);
            this._paths[endpointPath] = path;
        });
        return this;
    }
    /**
     *
     * @param {OpenApiResponses} builderResponses
     * @returns {OpenApiResponses}
     */
    createResponses(builderResponses) {
        const responses = this.endpoint.get("responses") || {};
        core_1.deepExtends(responses, builderResponses);
        responses[String(this.endpoint.statusCode)] = { description: "Success" };
        Object.keys(responses).forEach(code => {
            responses[code] = this.createResponse(code, responses[code]);
        });
        return responses;
    }
    /**
     *
     * @returns {Operation}
     * @param builder
     */
    createOperation(builder) {
        const operationId = this.getOperationId(this.endpoint.targetName, String(this.endpoint.propertyKey));
        const security = this.endpoint.get("security");
        const produces = this.endpoint.get("produces");
        const consumes = this.endpoint.get("consumes");
        return core_1.deepExtends({
            operationId,
            tags: [this.getTagName()],
            parameters: builder.parameters.length ? builder.parameters : undefined,
            consumes,
            responses: this.createResponses(builder.responses),
            security,
            produces
        }, this.endpoint.get("operation") || {});
    }
    /**
     *
     * @returns {string}
     */
    getTagName() {
        const clazz = this.endpoint.target;
        const ctrlStore = core_1.Store.from(clazz);
        const tag = ctrlStore.get("tag");
        const name = ctrlStore.get("name");
        return name || (tag && tag.name) || this.endpoint.targetName;
    }
    /**
     *
     * @param {string | number} code
     * @param options
     * @returns {Response}
     */
    createResponse(code, options) {
        const _a = core_1.deepExtends(options, this.endpoint.statusResponse(code) || {}), { type, collectionType, code: _, headers } = _a, obj = tslib_1.__rest(_a, ["type", "collectionType", "code", "headers"]);
        const response = core_1.deepClone(obj);
        if (type) {
            response.schema = this.createSchema({
                schema: this.endpoint.get("schema"),
                type: core_1.isPromise(type) || core_1.isArrayOrArrayClass(type) || type === Object ? undefined : type,
                collectionType
            });
        }
        if (headers) {
            response.headers = Object.entries(headers).reduce((obj, _a) => {
                var [key, _b] = _a, { value } = _b, schema = tslib_1.__rest(_b, ["value"]);
                return Object.assign(Object.assign({}, obj), { [key]: Object.assign({}, schema) });
            }, {});
        }
        return response;
    }
}
exports.OpenApiEndpointBuilder = OpenApiEndpointBuilder;
//# sourceMappingURL=OpenApiEndpointBuilder.js.map