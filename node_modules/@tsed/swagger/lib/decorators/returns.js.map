{"version":3,"file":"returns.js","sourceRoot":"","sources":["../../src/decorators/returns.ts"],"names":[],"mappings":";;AAAA,yCAA0D;AAG1D,SAAS,wBAAwB,CAAC,IAAW;IAC3C,MAAM,aAAa,GAAQ,EAAE,CAAC;IAE9B,IAAI,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;QAC1B,aAAa,CAAC,OAAO,KAAK,CAAC,GAAG,KAAK,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,MAAM,EAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,GAAG,EAAS,EAAE,QAAQ,EAAE,IAAI,EAAC,GAAG,aAAa,CAAC;IAElF,IAAI,IAAI,EAAE;QACR,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;KACrB;IAED,uCACK,OAAO,KACV,IAAI,EACJ,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,GAAG,EACjC,cAAc,EAAE,OAAO,CAAC,cAAc,IAAI,OAAO,CAAC,UAAU,IAC5D;AACJ,CAAC;AA0FD,SAAgB,OAAO,CAAC,GAAG,IAAW;IACpC,OAAO,mBAAU,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAAC;AACpD,CAAC;AAFD,0BAEC;AA6FD,SAAgB,YAAY,CAAC,GAAG,IAAW;IACzC,OAAO,mBAAU,iCAAK,wBAAwB,CAAC,IAAI,CAAC,KAAE,cAAc,EAAE,KAAK,IAAE,CAAC;AAChF,CAAC;AAFD,oCAEC","sourcesContent":["import {IResponseOptions, ReturnType} from \"@tsed/common\";\nimport {Type} from \"@tsed/core\";\n\nfunction mapStatusResponseOptions(args: any[]): any {\n  const configuration: any = {};\n\n  args.forEach((value: any) => {\n    configuration[typeof value] = value;\n  });\n\n  const {number: code, object: options = {} as any, function: type} = configuration;\n\n  if (type) {\n    options.type = type;\n  }\n\n  return {\n    ...options,\n    code,\n    type: options.type || options.use,\n    collectionType: options.collectionType || options.collection\n  };\n}\n\n/**\n * Add responses documentation for a specific status code.\n *\n * ## Examples\n * ## With status code\n *\n * ```typescript\n *  @Returns(404, {description: \"Not found\"})\n *  @Returns(200, {description: \"OK\", type: Model})\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"404\": {\n *       \"description\": \"Description\"\n *     },\n *     \"2OO\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"schemaOfModel\": \"...\"}\n *     }\n *   }\n * }\n * ```\n *\n * ### Without status code\n *\n * Returns can be use without status code. In this case, the response will be added to the default status code\n * (200 or the status code seated with `@Status`).\n *\n * ```typescript\n *  @Returns({description: \"Description\"})\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"200\": {\n *       \"description\": \"Description\"\n *     }\n *   }\n * }\n * ```\n *\n * ### With type schema\n *\n * Returns accept another signature with a type.\n *\n * ```typescript\n *  @Returns(Model, {description: \"Description\"}) //OR\n *  @Returns(Model)\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"200\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"schemaOfModel\": \"...\"}\n *     }\n *   }\n * }\n * ```\n * @param statusCode Code status\n * @param options Swagger responses documentations\n * @returns {Function}\n * @decorator\n * @swagger\n */\nexport function Returns(statusCode: number, options: Partial<IResponseOptions>): any;\nexport function Returns(options: Partial<IResponseOptions>): any;\nexport function Returns(model: Type<any>): any;\nexport function Returns(model: Type<any>, options: Partial<IResponseOptions>): any;\nexport function Returns(...args: any[]) {\n  return ReturnType(mapStatusResponseOptions(args));\n}\n\n/**\n * Add responses documentation for a specific status code.\n *\n * ## Examples\n * ## With status code\n *\n * ```typescript\n *  @ReturnsArray(200, {description: \"OK\", type: Model})\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"2OO\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"type\": \"array\"}\n *     }\n *   }\n * }\n * ```\n *\n * ### Without status code\n *\n * ReturnsArray can be use without status code. In this case, the response will be added to the default status code\n * (200 or the status code seated with `@Status`).\n *\n * ```typescript\n *  @ReturnsArray({description: \"Description\"})\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"200\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"type\": \"array\"}\n *     }\n *   }\n * }\n * ```\n *\n * ### With type schema\n *\n * ReturnsArray accept another signature with a type.\n *\n * ```typescript\n *  @ReturnsArray(Model, {description: \"Description\"}) //OR\n *  @ReturnsArray(Model)\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"200\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\n *         \"type\": \"array\",\n *         \"items\": {\n *           $ref: \"Model\"\n *         }\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param statusCode Code status\n * @param options Swagger responses documentations\n * @returns {Function}\n * @decorator\n * @swagger\n */\nexport function ReturnsArray(statusCode: number, options: Partial<IResponseOptions>): any;\nexport function ReturnsArray(options: Partial<IResponseOptions>): any;\nexport function ReturnsArray(model: Type<any>): any;\nexport function ReturnsArray(model: Type<any>, options: Partial<IResponseOptions>): any;\nexport function ReturnsArray(...args: any[]) {\n  return ReturnType({...mapStatusResponseOptions(args), collectionType: Array});\n}\n"]}