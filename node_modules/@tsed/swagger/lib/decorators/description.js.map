{"version":3,"file":"description.js","sourceRoot":"","sources":["../../src/decorators/description.ts"],"names":[],"mappings":";;AAAA,yCAAoC;AACpC,qCAAmD;AACnD,mDAA8C;AAC9C,2CAAsC;AAEtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkDG;AACH,SAAgB,WAAW,CAAC,WAAmB;IAC7C,OAAO,CAAC,GAAG,IAAW,EAAE,EAAE;QACxB,MAAM,IAAI,GAAG,uBAAgB,CAAC,IAAI,CAAC,CAAC;QACpC,QAAQ,IAAI,EAAE;YACZ,KAAK,WAAW;gBACd,OAAO,6BAAa,CAAC,EAAC,WAAW,EAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;YAC/C,KAAK,QAAQ;gBACX,OAAO,qBAAS,CAAC,EAAC,WAAW,EAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;YAC3C,KAAK,OAAO;gBACV,YAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YACtD;gBACE,eAAM,CAAC,EAAC,WAAW,EAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;SAClC;IACH,CAAC,CAAC;AACJ,CAAC;AAdD,kCAcC","sourcesContent":["import {Schema} from \"@tsed/common\";\nimport {getDecoratorType, Store} from \"@tsed/core\";\nimport {BaseParameter} from \"./baseParameter\";\nimport {Operation} from \"./operation\";\n\n/**\n * Add a description metadata on the decorated element.\n *\n * ## Examples\n * ### On class\n *\n * ```typescript\n * @Description(\"description\")\n * class Model {\n *\n * }\n * ```\n *\n * ### On method\n *\n * ```typescript\n * @Controller(\"/\")\n * class ModelCtrl {\n *    @Description(\"description\")\n *    async method() {}\n * }\n * ```\n *\n * ### On parameter\n *\n * ```typescript\n * @Controller(\"/\")\n * class ModelCtrl {\n *    async method(@Description(\"description\") @PathParam(\"id\") id: string) {}\n * }\n * ```\n *\n * ### On property\n *\n * ```typescript\n * class Model {\n *    @Description(\"description\")\n *    id: string;\n * }\n * ```\n *\n * @param {string} description\n * @returns {Function}\n * @decorator\n * @swagger\n * @jsonschema\n * @property\n * @class\n * @method\n * @parameter\n */\nexport function Description(description: string) {\n  return (...args: any[]) => {\n    const type = getDecoratorType(args);\n    switch (type) {\n      case \"parameter\":\n        return BaseParameter({description})(...args);\n      case \"method\":\n        return Operation({description})(...args);\n      case \"class\":\n        Store.from(...args).set(\"description\", description);\n      default:\n        Schema({description})(...args);\n    }\n  };\n}\n"]}