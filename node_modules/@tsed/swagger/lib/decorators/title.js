"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mod = require("@tsed/common");
const core_1 = require("@tsed/core");
const baseParameter_1 = require("./baseParameter");
const operation_1 = require("./operation");
const originalTitleDecorator = mod.Title;
/**
 * Add title metadata on the decorated element.
 *
 * ## Examples
 * ### On parameter
 *
 * ```typescript
 * @Controller("/")
 * class ModelCtrl {
 *    async method(@Title("title") @BodyParams("id") id: string) {}
 * }
 * ````
 *
 * Will produce:
 *
 * ```json
 * {
 *   "name":"body",
 *   "in":"body",
 *   "title":"title"
 * }
 * ```
 *
 * ### On property
 *
 ```typescript
 * class Model {
 *    @Title("title")
 *    id: string;
 * }
 * ```
 *
 * Will produce:
 *
 * ```json
 * {
 *   "type": "object",
 *   "properties": {
 *     "id": {
 *        "type": "string",
 *        "title": "title"
 *     }
 *   }
 * }
 * ```
 *
 * > Note: Title can be used on a method but swagger didn't use this key to describe an Operation.
 *
 * @param {string} title
 * @returns {(...args: any[]) => any}
 * @decorator
 * @swagger
 * @property
 * @method
 * @parameter
 */
function Title(title) {
    return (...args) => {
        const type = core_1.getDecoratorType(args);
        switch (type) {
            case "method":
                return operation_1.Operation({ title })(...args);
            case "parameter":
                return baseParameter_1.BaseParameter({ title })(...args);
            default:
                originalTitleDecorator(title)(...args);
        }
    };
}
exports.Title = Title;
mod.Title = Title;
//# sourceMappingURL=title.js.map