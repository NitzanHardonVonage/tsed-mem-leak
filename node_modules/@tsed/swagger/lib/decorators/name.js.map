{"version":3,"file":"name.js","sourceRoot":"","sources":["../../src/decorators/name.ts"],"names":[],"mappings":";;AAAA,qCAAmD;AACnD,mDAA8C;AAE9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH,SAAgB,IAAI,CAAC,IAAY;IAC/B,OAAO,CAAC,GAAG,IAAW,EAAE,EAAE;QACxB,MAAM,IAAI,GAAG,uBAAgB,CAAC,IAAI,CAAC,CAAC;QACpC,QAAQ,IAAI,EAAE;YACZ,KAAK,WAAW;gBACd,OAAO,6BAAa,CAAC,EAAC,IAAI,EAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;YACxC,KAAK,OAAO;gBACV,YAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBACtC,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;SACrE;IACH,CAAC,CAAC;AACJ,CAAC;AAbD,oBAaC","sourcesContent":["import {getDecoratorType, Store} from \"@tsed/core\";\nimport {BaseParameter} from \"./baseParameter\";\n\n/**\n * Add a name metadata on the decorated element.\n *\n * ## Examples\n * ### On parameters\n *\n * ```typescript\n * async myMethod(@Name(\"nameOf\") @PathParams(\"id\") id: string): Promise<Model>  {\n *\n * }\n * ```\n *\n * ### On parameters\n *\n * ```typescript\n * @Name(\"AliasName\")\n * @Controller(\"/\")\n * class ModelCtrl {\n *\n * }\n * ```\n *\n * @param name\n * @returns {Function}\n * @decorator\n * @swagger\n * @class\n * @parameter\n */\nexport function Name(name: string) {\n  return (...args: any[]) => {\n    const type = getDecoratorType(args);\n    switch (type) {\n      case \"parameter\":\n        return BaseParameter({name})(...args);\n      case \"class\":\n        Store.from(...args).set(\"name\", name);\n        break;\n      default:\n        throw new Error(\"Name is only supported on parameters and class\");\n    }\n  };\n}\n"]}