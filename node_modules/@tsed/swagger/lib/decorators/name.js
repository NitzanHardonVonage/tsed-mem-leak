"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@tsed/core");
const baseParameter_1 = require("./baseParameter");
/**
 * Add a name metadata on the decorated element.
 *
 * ## Examples
 * ### On parameters
 *
 * ```typescript
 * async myMethod(@Name("nameOf") @PathParams("id") id: string): Promise<Model>  {
 *
 * }
 * ```
 *
 * ### On parameters
 *
 * ```typescript
 * @Name("AliasName")
 * @Controller("/")
 * class ModelCtrl {
 *
 * }
 * ```
 *
 * @param name
 * @returns {Function}
 * @decorator
 * @swagger
 * @class
 * @parameter
 */
function Name(name) {
    return (...args) => {
        const type = core_1.getDecoratorType(args);
        switch (type) {
            case "parameter":
                return baseParameter_1.BaseParameter({ name })(...args);
            case "class":
                core_1.Store.from(...args).set("name", name);
                break;
            default:
                throw new Error("Name is only supported on parameters and class");
        }
    };
}
exports.Name = Name;
//# sourceMappingURL=name.js.map