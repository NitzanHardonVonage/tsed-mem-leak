{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/layouts/index.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4RG;AACH,MAAM;AACN,gEAAsC;AACtC,0DAAgC;AAChC,6DAAmC;AAEnC,8DAAoC;AACpC,gEAAsC;AAEtC,oCAAkC;AAClC,sCAAoC;AACpC,oCAAkC;AAClC,iDAA+C;AAC/C,sCAAoC;AACpC,mCAAiC","sourcesContent":["/**\n * ## Layouts\n *\n * Layouts are functions used by appenders to format log events for output. They take a log event as an argument and return a string. Log4js comes with several appenders built-in, and provides ways to create your own if these are not suitable.\n *\n * For most use cases you will not need to configure layouts - there are some appenders which do not need layouts defined (for example, logFaces-UDP); all the appenders that use layouts will have a sensible default defined.\n *\n * ### Configuration\n *\n * Most appender configuration will take a field called layout, which is an object - typically with a single field type which is the name of a layout defined below. Some layouts require extra configuration options, which should be included in the same object.\n *\n * ### Example\n *\n * ```typescript\n * import {Logger} from \"ts-log-debug\";\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders\n *   .push({\n *       type: \"stdout\", layout: {type: \"basic\"}, level: [\"debug\", \"info\", \"trace\"]\n *   });\n * ```\n * > This configuration replaces the stdout appender’s default colored layout with basic layout.\n *\n * ### Built-in Layouts\n * #### Basic\n *\n * * type - basic\n *\n * Basic layout will output the timestamp, level, category, followed by the formatted log event data.\n *\n * #### Example\n *\n * ```typescript\n * import {Logger} from \"ts-log-debug\";\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders\n *   .push({\n *       type: \"stdout\", layout: {type: \"basic\"}, level: [\"debug\", \"info\", \"trace\"]\n *   });\n * logger.debug('Log something');\n * ```\n *\n * This will output:\n *\n * ```bash\n * [2017-03-30 07:57:00.113] [DEBUG] [loggerName] - Log something\n *\n *\n * #### Colored\n *\n * - type - colored\n *\n * This layout is the same as basic, except that the timestamp, level and category will be colored according to the log event’s level (if your terminal/file supports it - if you see some weird characters in your output and no color then you should probably switch to basic). The colors used are:\n *\n * * TRACE - `blue`\n * * DEBUG - `cyan`\n * * INFO - `green`\n * * WARN - `yellow`\n * * ERROR - `red`\n * * FATAL - `magenta`\n *\n * #### Message Pass-Through\n *\n * * type - messagePassThrough\n *\n * This layout just formats the log event data, and does not output a timestamp, level or category. It is typically used in appenders that serialise the events using a specific format (e.g. gelf).\n *\n * #### Example\n *\n * ```typescript\n * import {Logger} from \"ts-log-debug\";\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders\n *   .push({\n *       type: \"console\", layout: {type: \"messagePassThrough\"}, level: [\"debug\", \"info\", \"trace\"]\n *   });\n * logger.debug('Log something');\n * ```\n *\n * This will output:\n *\n * ```bash\n * Log something\n * ```\n *\n * #### Dummy\n *\n * - type - dummy\n *\n * This layout only outputs the first value in the log event`s data.\n *\n * #### Example\n *\n * ```typescript\n * import {Logger} from \"ts-log-debug\";\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders\n *   .push({\n *       type: \"console\", layout: {type: \"dummy\"}, level: [\"debug\", \"info\", \"trace\"]\n *   });\n *\n * logger.debug('Cheese is too ripe! Cheese was: ', cheeseName);\n * ```\n *\n * This will output:\n *\n * ```bash\n * Cheese is too ripe! Cheese was:\n * ```\n *\n * #### Json\n *\n * - type - json\n * - seperator - string - char that separate each line\n *\n * #### Example\n *\n * ```typescript\n * import {Logger} from \"ts-log-debug\";\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders\n * .push({\n *      type: \"console\", layout: {type: \"json\", separator: \",\"}, level: [\"debug\", \"info\", \"trace\"]\n *  });\n *\n * logger.info('this is just a test');\n * logger.error('of a custom appender');\n * logger.warn('that outputs json');\n * ```\n * This example outputs the following:\n *\n * ```bash\n * {\"startTime\":\"2017-06-05T22:23:08.479Z\",\"categoryName\":\"json-test\",\"data\":[\"this is just a test\"],\"level\":\"INFO\",\"context\":{}},\n * {\"startTime\":\"2017-06-05T22:23:08.483Z\",\"categoryName\":\"json-test\",\"data\":[\"of a custom appender\"],\"level\":\"ERROR\",\"context\":{}},\n * {\"startTime\":\"2017-06-05T22:23:08.483Z\",\"categoryName\":\"json-test\",\"data\":[\"that outputs json\"],\"level\"\"WARN\",\"context\":{}},\n * ```\n *\n * #### Pattern\n *\n * - type - pattern\n * - pattern - string - specifier for the output format, using placeholders as described below\n * - tokens - object (optional) - user-defined tokens to be used in the pattern\n *\n * #### Pattern format\n *\n * The pattern string can contain any characters, but sequences beginning with `%` will be replaced with values taken from the log event, and other environmental values. Format for specifiers is `%[padding].[truncation][field]{[format]} -` padding and truncation are optional, and format only applies to a few tokens (notably, date). e.g. `%5.10p -` left pad the log level by 5 characters, up to a max of 10\n *\n * Fields can be any of:\n *\n * * `%r` time in toLocaleTimeString format\n * * `%p` log level\n * * `%c` log category\n * * `%h` hostname\n * * `%m` log data\n * * `%d` date, formatted - default is `ISO8601`, format options are: `ISO8601`, `ISO8601_WITH_TZ_OFFSET`, `ABSOLUTE`, `DATE`, or any string compatible with the date-format library. e.g. `%d{DATE}, %d{yyyy/MM/dd-hh.mm.ss}`\n * * `%% % -` for when you want a literal % in your output\n * * `%n` newline\n * * `%z` process id (from process.pid)\n * * `%x{<tokenname>}` add dynamic tokens to your log. Tokens are specified in the tokens parameter.\n * * `%X{<tokenname>}` add values from the Logger context. Tokens are keys into the context values.\n * * `%[` start a colored block (color will be taken from the log level, similar to coloredLayout)\n * * `%]` end a colored block\n *\n * #### Tokens\n *\n * User-defined tokens can be either a string or a function. Functions will be passed the log event, and should return a string. For example, you could define a custom token that outputs the log event's context value for `user` like so:\n *\n * ```typescript\n * import {Logger} from \"ts-log-debug\";\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders\n *   .push({\n *        type: \"messagePassThrough\",\n *        layout: {\n *            type: 'pattern',\n *            pattern: '%d %p %c %x{user} %m%n',\n *            tokens: {\n *                user: (logEvent) => AuthLibrary.currentUser()\n *            }\n *         },\n *         level: [\"debug\", \"info\", \"trace\"]\n *   });\n * logger.info('doing something.');\n * ```\n *\n * This would output:\n *\n * ```bash\n * 2017-06-01 08:32:56.283 INFO default charlie doing something.\n * ```\n *\n * You can also use the Logger context to store tokens (sometimes called Nested Diagnostic Context, or Mapped Diagnostic Context) and use them in your layouts.\n *\n * ```typescript\n * import {Logger} from \"ts-log-debug\";\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders\n *   .push({\n *        type: \"messagePassThrough\",\n *        layout: {\n *            type: 'pattern',\n *            pattern: '%d %p %c %X{user} %m%n',\n *         },\n *         level: [\"debug\", \"info\", \"trace\"]\n *   });\n * logger.addContext('user', 'charlie')\n * logger.info('doing something.');\n * ```\n *\n * This would output:\n * ```bash\n *  2017-06-01 08:32:56.283 INFO default charlie doing something.\n * ```\n *\n * > Note that you can also add functions to the Logger Context, and they will be passed the logEvent as well.\n *\n * #### Create your own layouts\n *\n * You can add your own layouts with `@Layout()` before pushing a configure to your logger.\n *\n * ```typescript\n * // customLayout.ts\n * import {BaseLayout, LogEvent, Layout} from \"ts-log-debug\";\n * import {formatLogData} from \"ts-log-debug/lib/utils/inpectUtils\";\n *\n * @ Layout({name: \"customJson\"})\n * export class JsonLayout extends BaseLayout {\n *   transform(loggingEvent: LogEvent, timezoneOffset?): string {\n *       const log = {\n *           startTime: loggingEvent.startTime,\n *           categoryName: loggingEvent.categoryName,\n *           level: loggingEvent.level.toString(),\n *           data: loggingEvent.data,\n *           context: loggingEvent.context\n *       };\n *\n *       log.data = log.data.map((data) => formatLogData([data]));\n *\n *       return JSON.stringify(log) + (this.config[\"separator\"] || \"\");\n *   };\n * }\n * ```\n *\n * This layout can be use like this:\n *\n * ```typescript\n * import {Logger} from \"ts-log-debug\";\n * import \"./customLayout.ts\"\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders\n *   .push({\n *       type: \"console\", layout:{type: \"customJson\"}, level: [\"debug\", \"info\", \"trace\"]\n *   });\n * logger.info('this is just a test');\n * logger.error('of a custom appender');\n * logger.warn('that outputs json');\n * ```\n *\n * This example outputs the following:\n *\n * ```bash\n * {\"startTime\":\"2017-06-05T22:23:08.479Z\",\"categoryName\":\"json-test\",\"data\":[\"this is just a test\"],\"level\":\"INFO\",\"context\":{}},\n * {\"startTime\":\"2017-06-05T22:23:08.483Z\",\"categoryName\":\"json-test\",\"data\":[\"of a custom appender\"],\"level\":\"ERROR\",\"context\":{}},\n * {\"startTime\":\"2017-06-05T22:23:08.483Z\",\"categoryName\":\"json-test\",\"data\":[\"that outputs json\"],\"level\"\"WARN\",\"context\":{}},\n * ```\n *\n * @module layouts\n * @preferred\n */\n/** */\nexport * from \"./constants/logColors\";\nexport * from \"./class/Layouts\";\nexport * from \"./class/BaseLayout\";\nexport * from \"./interfaces/BasicLayoutConfiguration\";\nexport * from \"./decorators/layout\";\nexport * from \"./utils/colorizeUtils\";\n\nimport \"./components/BasicLayout\";\nimport \"./components/ColoredLayout\";\nimport \"./components/DummyLayout\";\nimport \"./components/MessagePassThroughLayout\";\nimport \"./components/PatternLayout\";\nimport \"./components/JsonLayout\";\n"]}