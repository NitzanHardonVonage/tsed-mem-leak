{"version":3,"file":"module.js","sourceRoot":"","sources":["../../src/decorators/module.ts"],"names":[],"mappings":";;;AAAA,qCAA2C;AAC3C,8CAAkG;AAClG,mDAA8C;AAC9C,6CAAwC;AAexC;;;;;;;;;;GAUG;AACH,SAAgB,MAAM,CAAC,UAAmC,EAAE;IAC1D,MAAM,EAAC,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,KAAsB,OAAO,EAA3B,0FAA2B,CAAC;IAE1E,OAAO,sBAAe,CACpB,6BAAa,CAAC,aAAa,CAAC,EAC5B,uBAAU,CAAC;QACT,IAAI,EAAE,yBAAY,CAAC,QAAQ;QAC3B,KAAK,EAAE,0BAAa,CAAC,SAAS;QAC9B,OAAO;QACP,IAAI;QACJ,UAAU,EAAE,KAAK;QACjB,SAAS;QACT,IAAI;KACL,CAAC,CACH,CAAC;AACJ,CAAC;AAfD,wBAeC","sourcesContent":["import {applyDecorators} from \"@tsed/core\";\nimport {IDIConfigurationOptions, ProviderScope, ProviderType, TokenProvider} from \"../interfaces\";\nimport {Configuration} from \"./configuration\";\nimport {Injectable} from \"./injectable\";\n\nexport interface IModuleOptions extends IDIConfigurationOptions {\n  /**\n   * Define dependencies to build the provider\n   */\n  imports?: TokenProvider[];\n  /**\n   *\n   */\n  scope?: ProviderScope;\n\n  [key: string]: any;\n}\n\n/**\n * Declare a new Ts.ED module\n *\n * ## Options\n * - imports: List of Provider which must be built by injector before invoking the module\n * - resolvers: List of external DI must be used to resolve unknown provider\n * - deps: List of provider must be injected to the module constructor (explicit declaration)\n *\n * @param options\n * @decorator\n */\nexport function Module(options: Partial<IModuleOptions> = {}) {\n  const {imports, resolvers, deps, root, scope, ...configuration} = options;\n\n  return applyDecorators(\n    Configuration(configuration),\n    Injectable({\n      type: ProviderType.PROVIDER,\n      scope: ProviderScope.SINGLETON,\n      imports,\n      deps,\n      injectable: false,\n      resolvers,\n      root\n    })\n  );\n}\n"]}