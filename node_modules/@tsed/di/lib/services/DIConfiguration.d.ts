import { IDIConfigurationOptions } from "../interfaces/IDIConfigurationOptions";
import { ProviderScope } from "../interfaces/ProviderScope";
export declare class DIConfiguration {
    readonly default: Map<string, any>;
    protected map: Map<string, any>;
    [key: string]: any;
    constructor(initialProps?: {});
    get scopes(): {
        [key: string]: ProviderScope;
    };
    set scopes(value: {
        [key: string]: ProviderScope;
    });
    /**
     *
     * @param callbackfn
     * @param thisArg
     */
    forEach(callbackfn: (value: any, index: string, map: Map<string, any>) => void, thisArg?: any): void;
    /**
     *
     * @param propertyKey
     * @param value
     */
    set(propertyKey: string | Partial<IDIConfigurationOptions>, value?: any): this;
    setRaw(propertyKey: string, value: any): this;
    /**
     *
     * @param propertyKey
     * @returns {undefined|any}
     */
    get<T>(propertyKey: string): T;
    getRaw(propertyKey: string): any;
    merge(obj: Partial<IDIConfigurationOptions>): void;
    /**
     *
     * @param value
     * @returns {any}
     */
    resolve(value: any): any;
}
