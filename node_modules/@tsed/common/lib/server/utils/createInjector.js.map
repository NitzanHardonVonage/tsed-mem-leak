{"version":3,"file":"createInjector.js","sourceRoot":"","sources":["../../../src/server/utils/createInjector.ts"],"names":[],"mappings":";;AAAA,iCAAiG;AACjG,+CAAkC;AAClC,uFAAkF;AAElF,mBAAI,CAAC,IAAI,GAAG,MAAM,CAAC;AACnB,mBAAI,CAAC,KAAK,GAAG,MAAM,CAAC;AAEpB,SAAgB,cAAc,CAAC,WAA6C,EAAE;IAC5E,MAAM,QAAQ,GAAG,IAAI,oBAAe,EAAE,CAAC;IAEvC,gBAAgB;IAChB,QAAQ,CAAC,QAAQ,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC;IACpD,QAAQ,CAAC,MAAM,GAAG,mBAAI,CAAC;IAEvB,0BAA0B;IAC1B,IAAI,QAAQ,CAAC,eAAe,EAAE;QAC5B,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,iBAAY,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC,eAAe,CAAC;KAC9E;IAED,aAAa;IACb,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAEhC,0BAA0B;IAC1B,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,KAAK,MAAM,EAAE;QACpC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;KACxB;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC;AArBD,wCAqBC;AAED,SAAS,qBAAqB,CAAC,QAAyB;IACtD,MAAM,QAAQ,GAAG,oBAAe,CAAC,GAAG,CAAC,6CAAqB,CAAE,CAAC,KAAK,EAAE,CAAC;IAErE,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAwB,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC9E,QAAQ,CAAC,WAAW,CAAC,6CAAqB,EAAE,QAAQ,CAAC,CAAC;IAEtD,OAAO,QAAQ,CAAC,QAAQ,CAAC;AAC3B,CAAC","sourcesContent":["import {GlobalProviders, IDIConfigurationOptions, InjectorService, ProviderType} from \"@tsed/di\";\nimport {$log} from \"ts-log-debug\";\nimport {ServerSettingsService} from \"../../config/services/ServerSettingsService\";\n\n$log.name = \"TSED\";\n$log.level = \"info\";\n\nexport function createInjector(settings: Partial<IDIConfigurationOptions> = {}) {\n  const injector = new InjectorService();\n\n  // Init settings\n  injector.settings = createSettingsService(injector);\n  injector.logger = $log;\n\n  /* istanbul ignore next */\n  if (settings.controllerScope) {\n    injector.settings.scopes[ProviderType.CONTROLLER] = settings.controllerScope;\n  }\n\n  // @ts-ignore\n  injector.settings.set(settings);\n\n  /* istanbul ignore next */\n  if (injector.settings.env === \"test\") {\n    injector.logger.stop();\n  }\n\n  return injector;\n}\n\nfunction createSettingsService(injector: InjectorService) {\n  const provider = GlobalProviders.get(ServerSettingsService)!.clone();\n\n  provider.instance = injector.invoke<ServerSettingsService>(provider.useClass);\n  injector.addProvider(ServerSettingsService, provider);\n\n  return provider.instance;\n}\n"]}