{"version":3,"file":"contextMiddleware.js","sourceRoot":"","sources":["../../../src/server/utils/contextMiddleware.ts"],"names":[],"mappings":";;;AAAA,qCAAuC;AAGvC,mCAAyC;AAEzC,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAElC;;;;GAIG;AACH,SAAgB,iBAAiB,CAAC,QAAyB;IACzD,MAAM,EACJ,iBAAiB,GAAG,EAAE,EACtB,YAAY,GAAG,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,EACnD,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,CAAC;IAEnC,OAAO,CAAO,OAAwB,EAAE,QAA0B,EAAE,IAA0B,EAAE,EAAE;QAChG,MAAM,EAAE,GAAG,YAAY,EAAE,CAAC;QAE1B,OAAO,CAAC,GAAG,GAAG,IAAI,oBAAc,CAAC;YAC/B,EAAE;YACF,MAAM,EAAE,QAAQ,CAAC,MAAM;YACvB,GAAG,EAAE,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,GAAG;YACvC,iBAAiB;SAClB,CAAC,CAAC;QAEH,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC;QAChB,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;QAEjC,kBAAW,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAS,EAAE;YACtC,MAAM,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;YACtD,MAAM,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QAC9B,CAAC,CAAA,CAAC,CAAC;QAEH,MAAM,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAErD,IAAI,EAAE,CAAC;IACT,CAAC,CAAA,CAAC;AACJ,CAAC;AA5BD,8CA4BC","sourcesContent":["import {applyBefore} from \"@tsed/core\";\nimport {InjectorService} from \"@tsed/di\";\nimport * as Express from \"express\";\nimport {RequestContext} from \"../../mvc\";\n\nconst uuidv4 = require(\"uuid/v4\");\n\n/**\n * Bind request and create a new context to store information during the request lifecycle. See @@RequestContext@@ for more details.\n *\n * @param injector\n */\nexport function contextMiddleware(injector: InjectorService) {\n  const {\n    ignoreUrlPatterns = [],\n    reqIdBuilder = (() => uuidv4().replace(/-/gi, \"\"))\n  } = injector.settings.logger || {};\n\n  return async (request: Express.Request, response: Express.Response, next: Express.NextFunction) => {\n    const id = reqIdBuilder();\n\n    request.ctx = new RequestContext({\n      id,\n      logger: injector.logger,\n      url: request.originalUrl || request.url,\n      ignoreUrlPatterns\n    });\n\n    request.id = id;\n    request.log = request.ctx.logger;\n\n    applyBefore(response, \"end\", async () => {\n      await injector.emit(\"$onResponse\", request, response);\n      await request.ctx.destroy();\n    });\n\n    await injector.emit(\"$onRequest\", request, response);\n\n    next();\n  };\n}\n"]}